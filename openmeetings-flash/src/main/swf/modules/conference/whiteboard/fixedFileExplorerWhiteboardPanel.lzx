<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  
-->
<library>

<class name="multiWhiteboardPanel" extends="fixedFileExplorerWhiteBoard" y="42" x="1">
	<attribute name="whiteboardId" value="0" type="number" />
	<attribute name="objWhiteboard" value="null" />
	<attribute name="objMessage" value="null" />

	<handler name="onsharedMessage" args="obj">
		this.objWhiteboard = obj;
		if (this.sendVarsByWhiteboardId != null){
			if ($debug) Debug.write("multiWhiteboardPanel::onsharedMessage send: ", obj, whiteboardId);
			this.sendVarsByWhiteboardId.doCall();
		}
	</handler>

	<netRemoteCallHib name="sendVarsByWhiteboardId" funcname="sendVarsByWhiteboardId" 
			showLoading="false" remotecontext="$once{ canvas.thishib }" >
		<netparam><method name="getValue">return parent.parent.objWhiteboard;</method></netparam>
		<netparam><method name="getValue">return parent.parent.whiteboardId;</method></netparam>
		<handler name="ondata" args="value">
			<![CDATA[
				//The onResult-Handler will be called be the rtmpconnection
				//if ($debug) Debug.write("sendVarsByWhiteboardId : ",value);
			]]>
		</handler>
	</netRemoteCallHib>

	<handler name="onvisible" args="v">
	<![CDATA[
		if ($debug) Debug.write("onvisible :: ",v);
	]]>
	</handler>

	<method name="sendActiveWindow">
		if ($debug) Debug.warn("sendActiveWindow :: ");
		if (canvas.ismoderator || canvas.isAllowedToDraw) {
			if ($debug) Debug.warn("DO sendActiveWindow :: ");
			canvas._drawarea = this._drawareaMask._drawarea;
			this.objMessage = new Array();
			this.objMessage[0] = "activateWhiteboard";
			this.objMessage[1] = this.whiteboardId;
			this.sendMessageToMembers.doCall();
		}
	</method>

	<netRemoteCallHib name="sendMessageToMembers" funcname="sendMessageToMembers"
			showLoading="false" remotecontext="$once{ canvas.thishib }" >
		<netparam><method name="getValue">return parent.parent.objMessage;</method></netparam>
		<handler name="ondata" args="value">
		<![CDATA[
			//The onResult-Handler will be called be the rtmpconnection
			if ($debug) Debug.write("sendMessageToMembers :: ",value);
		]]>
		</handler>
	</netRemoteCallHib> 
</class>
<class name="fixedFileExplorerWhiteboardPanel" extends="basePropertyPanelWhiteboard" allowToggle="false"
		labelid="615" visible="${ !canvas.currentRoomObj.hideWhiteboard }">
	<handler name="oninit">
		canvas._drawarea = this;
		canvas._wb = this;
	</handler>

	<handler name="onopenWhiteBoard" >
		if ($debug) Debug.write(".. onopenWhiteBoard ..");
		this.loadInitObject();
	</handler>

	<!--
		##########################################
		Add, remove and change Focus of Whiteboard
		##########################################
	 -->
	<method name="addNewItem">
	<![CDATA[
		if (canvas.ismoderator || canvas.isAllowedToDraw) {
			this.getNewWhiteboardId.wbName = canvas.getLabelName(615) + (canvas.whiteboardCount > 0 ? " " + canvas.whiteboardCount : "");
			this.getNewWhiteboardId.doCall();
		}
	]]>
	</method>

	<netRemoteCallHib name="getNewWhiteboardId" funcname="whiteboardservice.getNewWhiteboardId" remotecontext="$once{ canvas.thishib }" >
		<attribute name="wbName" type="string"/>
		<netparam><method name="getValue">return parent.wbName;</method></netparam>
		<handler name="ondata" args="value">
		<![CDATA[
			//The onResult-Handler will be called be the rtmpconnection
			if ($debug) Debug.write("############## getNewWhiteboardId : ",value);
		]]>
		</handler>
	</netRemoteCallHib>

	<method name="addNewItemSynced" args="whiteboardId, wbName">
		for (var eg in canvas._wbBar.subviews) {
			canvas._wbBar.subviews[eg].isactive = false;
			canvas._wbBar.subviews[eg].onmouseout.sendEvent(null);
			canvas._wbBar.subviews[eg].objRef.setAttribute("visibility","hidden");
		}
		var whiteboard = new lz.multiWhiteboardPanel(this,{
							whiteboardId: whiteboardId
							, wbName: wbName
						});
		var tWhiteboardBtn = new lz.whiteboardMiniButton(canvas._wbBar,{
									name: "bar" + whiteboardId,
									objRef: whiteboard,
									width: canvas._wbBar.staticwidth,
									isactive: true,
									btnName: wbName
								});
		canvas._wbBar.currentBtn = tWhiteboardBtn;
		canvas._wbBar.setWhiteboardId(whiteboardId);
		tWhiteboardBtn.onmouseout.sendEvent(null);
		canvas.whiteboardCount++;
		return whiteboard;
	</method>

	<method name="newWhiteboard" args="obj">
		if ($debug) Debug.write("newWhiteboard :: ",obj);
		this.addNewItemSynced(obj[1], obj[2]);
	</method>

	<!--
		##########################################
		Removal of Whiteboards
		##########################################
	 -->
	<method name="sendRemoveWindow" args="whiteboardId">
		if ($debug) Debug.warn("sendRemoveWindow :: ");
		if (canvas.ismoderator || canvas.isAllowedToDraw) {
			this.deleteWhiteboard.whiteboardId = whiteboardId;
			this.deleteWhiteboard.doCall();
			if ($debug) Debug.warn("DO sendRemoveWindow :: ");
			this.objMessage = new Array();
			this.objMessage[0] = "removeWindow";
			this.objMessage[1] = whiteboardId;
			this.sendMessageToMembers.doCall();
		}
	</method>

	<netRemoteCallHib name="deleteWhiteboard" funcname="whiteboardservice.deleteWhiteboard"
			remotecontext="$once{ canvas.thishib }" >
		<attribute name="whiteboardId" value="0" type="number" />
		<netparam><method name="getValue">return parent.whiteboardId;</method></netparam>
		<handler name="ondata" args="value">
			<![CDATA[
				//The onResult-Handler will be called be the rtmpconnection
				if ($debug) Debug.write("############## deleteWhiteboard : ", value);
			]]>
		</handler>
	</netRemoteCallHib>

	<method name="renameWhiteboard" args="obj">
		if ($debug) Debug.write("renameWhiteboard :: ", obj);
		for (var eg in canvas._wbBar.subviews) {
			var btn = canvas._wbBar.subviews[eg];
			if (btn.objRef.whiteboardId == obj[1]) {
				btn.setAttribute('btnName', obj[2]);
				btn.calcTextWidth();
				break;
			}
		}
	</method>

	<netRemoteCallHib name="sendMessageToMembers" funcname="sendMessageToMembers" 
			showLoading="false" remotecontext="$once{ canvas.thishib }" >
		<netparam><method name="getValue">return parent.parent.objMessage;</method></netparam>
		<handler name="ondata" args="value">
		<![CDATA[
			//The onResult-Handler will be called be the rtmpconnection
			if ($debug) Debug.write("sendMessageToMembers :: ",value);
		]]>
		</handler>
	</netRemoteCallHib>

	<method name="sendWatchObjectByWhiteboard" args="obj">
		if ($debug) Debug.write("sendWatchObjectByWhiteboard :: ",obj);
		for (var eg in this.subviews) {
			if (obj.id == this.subviews[eg].whiteboardId) {
				this.subviews[eg]._drawareaMask._drawarea.sendWatchObject(obj.param[2],obj.param[3],false);
				return;
			}
		}
	</method>

	<method name="loadWmlToWhiteboardById" args="obj">
		if ($debug) Debug.write("loadWmlToWhiteboardById :: ",obj);
		for (var eg in this.subviews) {
			if (obj.id == this.subviews[eg].whiteboardId) {
				this.subviews[eg]._drawareaMask._drawarea.loadWmlToWhiteboardById(obj.roomitems);
				return;
			}
		}
	</method>
	
	<method name="activateWhiteboard" args="obj">
		if ($debug) Debug.write("activateWhiteboard :: ",obj);
		for (var eg in canvas._wbBar.subviews) {
			if (canvas._wbBar.subviews[eg].objRef.whiteboardId == obj[1]) {
				canvas._wbBar.subviews[eg].activateSynced();
				return;
			}
		}
	</method>
	
	<!--
		##########################################
		StarUp Loading Of Objects
		##########################################
	 -->
	<method name="loadInitObject">
		this.getRoomItemsBy.doCall();
	</method>

	<netRemoteCallHib name="getRoomItemsBy" funcname="whiteboardservice.getRoomItemsBy"
			remotecontext="$once{ canvas.thishib }" >
		<handler name="ondata" args="value">
		<![CDATA[
			//The onResult-Handler will be called be the rtmpconnection
			if ($debug) Debug.write("############## getRoomItemsBy : ",value);
			parent.loadWhiteboards(value);
		]]>
		</handler>
	</netRemoteCallHib>

	<method name="loadWhiteboards" args="whiteboardObjects">
	<![CDATA[
		//if ($debug) Debug.write("!!!!!!!!!!! whiteboardObjects :: ", whiteboardObjects);
		for (var eg in whiteboardObjects) {
			var wb = whiteboardObjects[eg];
			var whiteBoard = addNewItemSynced(wb.whiteBoardId, wb.name);
			whiteBoard._drawareaMask._drawarea.loadObjectList(wb);
		}
	]]>
	</method>

	<view name="scrollLeft" y="21" x="20" width="20">
		<handler name="onclick" args="refOb">
			parent._barArea._scroll.step(-1);
		</handler>
		<view resource="wb_arrow_left_rsc" y="0" x="0" opacity="${ parent.parent._barArea._scroll.scrollable ? 1 : 0.1 }" />
	</view>
	<view name="_barArea" width="${ parent.width - 60 }" height="20" x="40" y="21" clip="true">
		<whiteboardBarMenu name="_bar" height="20" y="0" x="0">
			<attribute name="whiteboardId" value="-1" type="number" />
			
			<handler name="oninit">
				canvas._wbBar = this;
			</handler>
		</whiteboardBarMenu>
		<om_hscrollbar name="_scroll" height="0" stepsize="50"/>
	</view>
	<view name="scrollRight" y="21" x="${ parent.width - 20 }" width="20">
		<handler name="onclick" args="refOb">
			parent._barArea._scroll.step(1);
		</handler>
		<view resource="wb_arrow_right_rsc" y="0" x="0" opacity="${ parent.parent._barArea._scroll.scrollable ? 1 : 0.1 }" />
	</view>

	<view name="addNewItemButton" y="24" x="0"
			visible="${ ((canvas.ismoderator) ? true : ((canvas.isAllowedToDraw) ? true : false )) }">
		<attribute name="whiteboardId" value="-1" type="number" />
		
		<handler name="onmouseover" args="refOb">
			this.bg.setAttribute("visibility","visible");
		</handler>
		
		<handler name="onmouseout" args="refOb">
			this.bg.setAttribute("visibility","hidden");
		</handler>
		
		<handler name="onclick" args="refOb">
			parent.addNewItem();
		</handler>
		
		<view name="bg" bgcolor="0xEEEEEE" opacity="0.5" width="18" height="18" visibility="hidden" />
		
		<view resource="add_whiteboard_rsc" y="0" x="0" />
		
		<labelTooltip labelid="1596" />
	</view>

	<view width="${ parent.width }" height="1" y="41"
			bgcolor="$once{ canvas.getThemeColor('basebgcolorizer') }">
		<attribute name="whiteboardId" value="-1" type="number" />
	</view>
</class>

</library>
