<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.

-->
<library>

<!-- #######################
	Class editRecordStream

	Description:
	This Class shows a window where you can alter you Video-/Microphone- Input-Resources
	and start to stream. The app could also use the default values for Cam/Mic but
	most users don't know how to alter this (weather in System-Control-Panel or by Right Clicking
	on the Flash-Screen and *>Preferences>Camera* )
	So I think it is better if Users are forced to choose something from this list

 -->

<class name="editRecordStreamSWF10" extends="labelExplorerBox" labelid="51"
		width="680" height="540" x="14" y="-540" >
	<switch>
		<when property="$as3">
			<passthrough>
				import flash.events.StatusEvent;
				import flash.media.Camera;
				import flash.media.Microphone;
			</passthrough>
		</when>
	</switch>

	<attribute name="initY" value="40" type="number" />

	<!---
		if true the user will see the dialog no matter if he has choosen "do not show again" or not
	 -->
	<attribute name="doDefaultAnimation" value="true" type="boolean" />
	<attribute name="cam_default_width" value="320" type="number" />
	<attribute name="cam_default_height" value="260" type="number" />
	<attribute name="lastRecorded" value="" type="string" />
	<attribute name="isRunning" value="false" type="boolean" />
	<attribute name="recordingsCounter" value="5" type="number" />
	<attribute name="timerIsRunning" value="false" type="boolean" />
	<attribute name="counterDelegate" value="null" />
	<attribute name="executeAttachCamera" value="false" type="boolean" />

	<method name="startTimer">
		this.timerIsRunning = true;
		this.timerWasUnmutedTheFirstTime = true;
		lz.Timer.addTimer( this.counterDelegate, 1000 );
	</method>

	<method name="count" args="calleeObj">
		if (this.recordingsCounter != 0){
			this.recordingsCounter -= 1;
			lz.Timer.resetTimer(this.counterDelegate, 1000);

			this._text._info.setAttribute("text",""+this.recordingsCounter+" sec");
		} else {
			this._text.setAttribute("visibility","hidden");
			this.doStop();
			this.timerIsRunning = false;
			lz.Timer.removeTimer(this.counterDelegate);
			this.doPlay();
		}
	</method>

	<method name="startTimerToCount">
		if (!this.timerIsRunning) {
			this.startTimer();
		}
	</method>

	<handler name="oninit">
	<![CDATA[
		if (canvas.editRecordStream != null) {
			canvas.editRecordStream.destroy();
		}
		canvas.editRecordStream = this;

		this.counterDelegate = new LzDelegate(this, "count");

		if ($debug) Debug.write("editrecordstream ###################### ");

		initItems();
		if (this.doDefaultAnimation && !canvas.isInterview) {
			this._chooseDeviceAnimation.setAttribute('started', true);
		} else {
			this.setAttribute("y", initY);
		}
		this.executeAttachCamera = true;
		this.attachCamera();
	]]>
	</handler>

	<handler name="ondestroy">
	<![CDATA[
		if ($debug) Debug.write("editrecordstream::ondestroy ");
		cleanVideos();
		canvas.editRecordStream = null;
	]]>
	</handler>

	<method name="storeAVsettings">
		canvas.commonVideoViewContent.storeAVsettings(
				this.availableCams.getValue()
				, this.availableMics.getValue()
				, this.cam_default_width
				, this.cam_default_height
			);
	</method>

	<method name="doStartRecording">
	<![CDATA[
		this._btnStartRecording.setAttribute("enabled",false);
		this._play.setAttribute("enabled",false);
		this.recordingsCounter = 5;
		this._text.setAttribute("visibility","visible");
		this._text._info.setAttribute("text","5 sec");
		this.isRunning = true;

		var videoview = this._video.content._publisher._chatvideoinner._videostream;
		var _micro = canvas.commonVideoViewContent.getMic(this.availableMics.getValue());
		var _camera = canvas.commonVideoViewContent.getCam(this.availableCams.getValue(), cam_default_width, cam_default_height);
		if ($debug) Debug.write(_camera, _micro);

		if ($debug && _camera != null) Debug.warn("_camera.muted ", _camera.muted);
		if ($debug && _micro != null) Debug.warn("_micro.muted ", _micro.muted);
		if ((_camera != null && !_camera.muted) || (_micro != null && !_micro.muted)) {
			this.startTimer();
		}

		//start recording of client stream
		var t = new Date();
		this.lastRecorded = "TEST_SETUP_"+t.getTime();
		this._video.content._publisher.setAttribute("visibility","visible");
		this._video.content._viewer.setAttribute("visibility","hidden");
		videoview.record(this.lastRecorded,_camera,_micro);
	]]>
	</method>

	<method name="doPlay">
	<![CDATA[
		if (this.lastRecorded == "") {
			//Error - nothing recorded yet
			if ($debug) Debug.warn("Nothing to Play");
		} else {
			this._play.setAttribute("enabled",true);
			this._video.content._publisher.setAttribute("visibility","hidden");
			this._video.content._viewer.setAttribute("visibility","visible");
			var videoview = this._video.content._viewer._chatvideoinner._videostream;
			videoview.justPlayStream(this.lastRecorded+".flv",0);
		}
	]]>
	</method>

	<method name="doStop">
		if (this.isRunning) {
			this.isRunning = false;
			var videoview = this._video.content._publisher._chatvideoinner._videostream;
			this._btnStartRecording.setAttribute("enabled",true);
			videoview._stop();
			this.doPlay();
		}
		var videoviewViewer = this._video.content._viewer._chatvideoinner._videostream;
		videoviewViewer._stop();
	</method>

	<animator name="_chooseDeviceAnimation" started="false" attribute="y" to="40" duration="750" />

	<labelText fontstyle="bold" labelid="758" width="${ parent.width-2 }" height="30" multiline="true" y="20" />

	<method name="fillDeviceList" args="list,combo,prop">
	<![CDATA[
		//Initialize and get eventually stored property
		var dev = canvas.commonVideoViewContent.getAvSetting(prop);

		//Get all availible devices
		var foundStoredDev = null;
		combo.addItem(canvas.getLabelName(159), -1);
		for (var eg = 0; eg < list.length; ++eg) {
			combo.addItem(list[eg], eg);
			var r = "" + eg;
			if (r == dev) {
				foundStoredDev = r;
			}
		}
		return foundStoredDev;
	]]>
	</method>

	<method name="selectListItem" args="combo, selected, select">
		if (selected != null) {
			combo.selectItem(selected);
		} else {
			combo.selectItemAt(select ? 1 : 0);
		}
	</method>

	<!--
		Initialize the default settings for cam and resolution and attach the camera
		after we have made sure the values are there one time
	 -->
	<method name="initItems">
	<![CDATA[
		//fill list of Cameras
		var cameras = Camera.names;
		var foundStoredCam = fillDeviceList(cameras, availableCams, "cam");
		selectListItem(availableCams, foundStoredCam, cameras.length > 0);

		//fill list of Mics
		var mics = Microphone.names;
		var foundStoredMic = fillDeviceList(mics, availableMics, "mic");
		selectListItem(availableMics, foundStoredMic, mics.length > 0);

		// settings
		var addCams = !canvas.currentRoomObj.audioOnly && cameras.length > 0;
		var addMics = mics.length > 0;
	]]>
	</method>

	<method name="attachCamera">
	<![CDATA[
		//Don't execute before combobox items are not initialized
		if (!this.executeAttachCamera) {
			if ($debug) Debug.write("Return, executeAttachCamera is false");
			return;
		}

		if (_video == undefined)  {
			if ($debug) Debug.write("Return, video not yet ready");
			return;
		}
		_video.content._publisher.setAttribute("visible", true);
		_video.content._viewer.setAttribute("visible", false);
		var videoview = this._video.content._publisher._chatvideoinner._videostream;
		//stop will not call clear as there is no NetStream
		videoview._stop();
		videoview.clear();
		var _camera = canvas.commonVideoViewContent.getCam(availableCams.getValue(), cam_default_width, cam_default_height);
		if (_camera != null) {
			videoview.attachCamera(_camera);
		}
	]]>
	</method>

	<method name="cleanVideos">
		if (_video == undefined) return;
		//make sure stop and clear is called, as the _stop method does not work for all
		//videoviews in the device settings.
		_video.content._publisher._chatvideoinner._videostream._stop();
		_video.content._viewer._chatvideoinner._videostream._stop();
		_video.content._publisher._chatvideoinner._videostream.clear();
		_video.content._viewer._chatvideoinner._videostream.clear();
		if ($debug) Debug.write("Cleaned up videos and free resources");
	</method>

	<method name="updateVisibility">
	<![CDATA[
		var camVisible = availableCams.getValue() > -1;
		var micVisible = availableMics.getValue() > -1;
		var textVisible = !camVisible && !micVisible;
		this._btnStartRecording.setAttribute("visible", camVisible || micVisible);
		this._video.setAttribute("visible", camVisible);
		this._play.setAttribute("visible", camVisible || micVisible);
		this._level_meter.setAttribute("visible", micVisible);
		this.infoTextNoAV.setAttribute("visible", textVisible);
		this.availibleResolutionsLabel.setAttribute("visible", ((canvas.isInterview) ? false : camVisible));
		this.availibleResolutionsWarning.setAttribute("visible", ((canvas.isInterview) ? false : camVisible));
		this.availibleResolutions.setAttribute("visible", ((canvas.isInterview) ? false : camVisible));
	]]>
	</method>

	<labelText name="availableCamsLabel" labelid="52" fontsize="11" x="10" y="80" width="$once{ parent.width-20 }" />
	<resetCombobox fontsize="11" name="availableCams" x="10" y="100" width="280" editable="false">
		<handler name="onselect">
			parent.updateVisibility();
			parent.attachCamera();
		</handler>
	</resetCombobox>

	<labelText name="availableMicsLabel" labelid="53" fontsize="11" x="10" y="120" width="$once{ parent.width-20 }" />
	<resetCombobox fontsize="11" name="availableMics"  x="10" y="140" width="280" editable="false">
		<handler name="onselect">
			parent.updateVisibility();
		</handler>
	</resetCombobox>

	<labelText name="infoTextNoAV" labelid="452" multiline="true" width="280"
			fontsize="11" x="10" y="164" visibility="hidden" />

	<labelText name="availibleResolutionsLabel" labelid="1429"
			fontsize="11" x="10" y="164" width="$once{ parent.width-20 }" />

	<view name="availibleResolutionsWarning" x="272" y="164"
			resource="warning_icon_popup_devices_rsc" clickable="true">
		<labelTooltip multiline="true" labelid="1430" />
	</view>

	<resetCombobox fontsize="11" name="availibleResolutions" x="10" shownitems="10"
			y="184" width="280" editable="false">
		<!--- @keywords private -->
		<attribute name="counter" value="0" />
		<handler name="oninit">
		<![CDATA[
			var i = getItemAt(0);
			if ($debug) Debug.write("oninit ", this.selected, this, i);
			if (!this.selected && !!i) {
				selectItemAt(0);
				onselect.sendEvent(i);
			}
		]]>
		</handler>
		<handler name="onselect" args="item">
		<![CDATA[
			if (!canvas.isInterview) {
				if ($debug) Debug.write("availibleResolutions::onselect cam [W x H] ", item.cam_width, item.cam_height);
				parent.setAttribute("cam_default_width", item.cam_width);
				parent.setAttribute("cam_default_height", item.cam_height);

				var py = parent.y < 0 ? 5 : parent.y;
				var maxWidth = Math.min(600, canvas.width - parent.x - 10)
					, maxHeight = Math.min(500, canvas.height - py - 10)
					, newWidth = maxWidth, newHeight = maxHeight;
				if (item.cam_width > 240) {
					newWidth = maxWidth + item.cam_width - 240;
				}
				if (item.cam_height > 180) {
					newHeight = maxHeight + item.cam_height - 180;
				}

				if (newWidth + parent.x + 10 > canvas.width) {
					newWidth = maxWidth;
				}
				if (newHeight + py + 10 > canvas.height) {
					newHeight = maxHeight;
				}
				parent.setAttribute("width", newWidth);
				parent.setAttribute("height", newHeight);
			}
			parent.attachCamera();
		]]>
		</handler>
		<textlistitem datapath="myConfigSet:/config/availableCameraResolutions/resolution" >
			<attribute name="cam_width" value="320" type="number" />
			<attribute name="cam_height" value="240" type="number" />
			<handler name="ondata">
			<![CDATA[
				//if ($debug) Debug.write("ondata ", this);
				var type = this.datapath.xpathQuery('@type');
				this.cam_width = Number(this.datapath.xpathQuery('@width'));
				this.cam_height = Number(this.datapath.xpathQuery('@height'));
				this.setAttribute("text", "" + this.cam_width + "x" + this.cam_height + " [" + type + "]");
				var isDefault = this.datapath.xpathQuery('@isDefault') == "true";

				var width = canvas.commonVideoViewContent.getAvSetting("width");
				var height = canvas.commonVideoViewContent.getAvSetting("height");
				if (!!width && !!height && width == this.cam_width && height == this.cam_height) {
					parent.selectItemAt(parent.counter);
					parent.onselect.sendEvent(this);
					parent.selected = this;
				} else if (isDefault) {
					if ($debug) Debug.write("Found default one ", type);
					parent.selectItemAt(parent.counter);
					parent.onselect.sendEvent(this);
				}
				parent.counter++;
			]]>
			</handler>
		</textlistitem>
	</resetCombobox>

	<simpleLabelButton name="_btnStartRecording" labelid="775" width="140" x="150" y="220" height="28">
		<handler name="onclick">
			parent._level_meter.startLevel();
			parent.doStartRecording();
		</handler>
	</simpleLabelButton>

	<view x="340" y="60" name="_video" clip="true"
			width="${ parent.width-this.x-10 }" height="${ parent.height-260 }">
		<view name="content">
			<videoObjectTestBroadcast name="_publisher"
					width="${ parent.parent.parent.cam_default_width }"
					height="${ parent.parent.parent.cam_default_height }">
				<handler name="sendCameraStatus" args="camStatus">
					if ($debug) Debug.write("sendCameraStatus -1- ",camStatus);
					if (camStatus == "Camera.Unmuted") {
						parent.parent.parent.startTimerToCount();
					}
				</handler>

				<handler name="sendMicroStatus" args="micStatus">
					if ($debug) Debug.write("sendMicroStatus -1- ",micStatus);
					if (micStatus == "Microphone.Unmuted") {
						parent.parent.parent.startTimerToCount();
					}
				</handler>
			</videoObjectTestBroadcast>

			<videoObjectPlayTestBroadcast name="_viewer" visibility="hidden"
					width="${ parent.parent.parent.cam_default_width }"
					height="${ parent.parent.parent.cam_default_height }" />
		</view>

		<om_vscrollbar />
		<om_hscrollbar />
	</view>

	<view name="_text" x="340" y="60" width="240" height="180" visibility="hidden">
		<text name="_info" resize="true" bgcolor="0xFFFFFF" align="right" fontsize="12" fontstyle="bold" />
	</view>

	<simpleLabelButton name="_play" y="${ parent.height-166 }" x="490" enabled="false" width="90" labelid="764">
		<handler name="onclick">
			parent.doPlay();
		</handler>
	</simpleLabelButton>

	<view name="_level_meter" x="340" y="${ parent.height-190 }" width="240" height="20" clip="true" bgcolor="0x000000">
		 <!--- Level delegate, used to track level changes.
			@keywords private -->
		<attribute name="_leveldel" value="$once{new LzDelegate(this, '_updateLevel')}"/>

		<method name="_updateLevel" args="no">
			<![CDATA[
				if (parent._video.content._publisher._chatvideoinner._videostream.micro == null) {
					return;
				}
				this.setNewLevel(parent._video.content._publisher._chatvideoinner._videostream.micro.activityLevel);
			]]>
		</method>

		<method name="startLevel">
			this._leveldel.register(lz.Idle, "onidle");
		</method>

		<method name="resetNewLevel">
			this._leveldel.unregisterAll();
			this.setNewLevel(0);
		</method>

		<method name="setNewLevel" args="no">
		<![CDATA[
			var newLevel = (238 / 100) * no;
			this._over.setAttribute("width", 238 - newLevel);
			this._over.setAttribute("x", 1 + newLevel);
		]]>
		</method>

		<view name="_bg" width="238" height="18" x="1" y="1" bgcolor="0xFFFFFF" />
		<view name="_grip" resource="level_meter_rsc" x="1" y="1" />
		<view name="_over" width="238" height="18" x="1" y="1" bgcolor="0xFFFFFF" />
		<labelText labelid="767" x="2" y="2" height="16" width="236" resize="false" />
	</view>

	<view y="${ parent.height-98 }" resource="test_setup_info_rsc" x="16" />

	<labelText fontstyle="bold" labelid="765" x="39" y="${ parent.height-100 }"
			width="${ parent.width-50 }" multiline="true" />

	<simpleLabelButton fontsize="11" labelid="918" x="${ parent.width-220 }" y="${ parent.height-50 }"
			height="28" width="100">
		<handler name="onclick">
			parent.cleanVideos();
			parent.close();
		</handler>
	</simpleLabelButton>

	<simpleLabelButton fontsize="11" labelid="144" x="${ parent.width-110 }" y="${ parent.height-50 }"
			height="28" width="100" >
		<handler name="onclick">
			parent.cleanVideos();
			parent.storeAVsettings();
			parent.close();
			var vid = canvas.commonVideoViewContent.getVideoObjectByPublicSID(canvas.publicSID);
			if (!!vid) {
				vid.resync();
			}
		</handler>
	</simpleLabelButton>
</class>

</library>
